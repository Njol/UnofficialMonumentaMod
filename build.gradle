plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
    id "com.matthewprenger.cursegradle" version "1.+"
//    id 'java'
//    id 'com.github.johnrengelman.shadow' version '1.2.2'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17


if (project.hasProperty("mod_extradata")) {
    archivesBaseName = project.archives_base_name + "-mc" + project.minecraft_version + "-" + project.mod_extradata;
} else {
    archivesBaseName = project.archives_base_name + "-mc" + project.minecraft_version
}

version = project.mod_version
group = project.maven_group

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modApi "com.terraformersmc:modmenu:6.3.1"
    modApi("me.shedaniel.cloth:cloth-config-fabric:10.1.105") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    include(implementation('club.minnced:discord-rpc-release:v3.4.0'))
    include(implementation("com.github.MinnDevelopment:java-discord-rpc:v2.0.2"))

    //un-comment those if you want to load from local maven (don't have both local and jitpack sources on at the same time, dunno what it'd do I never tried it)
    //modApi "ch.njol.minecraft:ui-framework-mc1_19_3:${project.ui_framework_version}"
    //include "ch.njol.minecraft:ui-framework-mc1_19_3:${project.ui_framework_version}"
    //modApi "ch.njol.minecraft:config-framework-mc1_19:${project.config_framework_version}"
    //include "ch.njol.minecraft:config-framework-mc1_19:${project.config_framework_version}"
    //un-comment those if you want to load from jitpack (don't have both local and jitpack sources on at the same time, dunno what it'd do I never tried it)
    modApi('com.github.Ascynx:MCConfigFramework:mc1.19.4-SNAPSHOT')
    include('com.github.Ascynx:MCConfigFramework:mc1.19.4-SNAPSHOT')
    modApi('com.github.Ascynx:MCUIFramework:mc1.19.4-SNAPSHOT')
    include('com.github.Ascynx:MCUIFramework:mc1.19.4-SNAPSHOT')
}

repositories {
   mavenLocal()
    mavenCentral()
    maven { url = "https://maven.terraformersmc.com" }
    maven { url = "https://maven.shedaniel.me/" }
    jcenter()
    maven { url = "https://jitpack.io/" }
    maven {
        name = "GithubPackages-ConfigFramework"
        url = uri("https://maven.pkg.github.com/Ascynx/MCUIFramework")
        credentials {
            username = System.getenv("GITHUB_ACTOR")
            password = System.getenv("GITHUB_TOKEN")
        }
    }
    maven {
        name = "GithubPackages-ConfigFramework"
        url = uri("https://maven.pkg.github.com/Ascynx/MCConfigFramework")
        credentials {
            username = System.getenv("GITHUB_ACTOR")
            password = System.getenv("GITHUB_TOKEN")
        }
    }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand project.properties
        duplicatesStrategy = 'include'
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
        duplicatesStrategy = 'include'
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}
//shadowJar {
//    dependencies {
//        include(dependency('me.shedaniel.cloth:cloth-config-fabric:.*'))
//    }
//}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

def changeLog = '''

'''

String getReleaseType() {
    if (!project.hasProperty("mod_extradata")) {
        return "release"
    }

    for (String prefix in new String[]{"pre", "beta", "alpha"}) {
        if (project.mod_extradata.startsWithIgnoreCase(prefix)) {
            switch(prefix) {
                case "pre":
                case "beta":
                    return "beta"
                case "alpha":
                    return "alpha"
                default:
                    return "release"
            }
        }
    }

    return "release";
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "unofficial-monumenta-mod"
    versionNumber = project.mod_version
    versionType = getReleaseType()
    uploadFile = remapJar
    gameVersions = [project.minecraft_version]
    loaders = ["fabric"]
    changelog = changeLog
    dependencies {
        required.project "fabric-api"
        optional.project "modmenu"
        optional.project "cloth-config"
    }
    // debugMode = true
}

curseforge {
    String releaseString = getReleaseType()

    if (System.getenv("CURSEFORGE_TOKEN") != null) {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
    }
    project {
        id = '509666'
        changelog = changeLog
        releaseType = releaseString
        addGameVersion project.minecraft_version
        addGameVersion 'Fabric'

        mainArtifact(remapJar) {
            relations {
                requiredDependency "fabric-api"
                optionalDependency "modmenu"
                optionalDependency "cloth-config"
            }
        }
        options {
            // debug = true
        }
    }
}
